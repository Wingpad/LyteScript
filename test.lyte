Person <- %{
  __constructor: @(name, favoriteHat) {
    name -> @name
    favoriteHat -> @favoriteHat
  },
  __toString: {
    "I'm " `++` @name `++` " and my favorite kind of hat is a(n) " `++` @favoriteHat `++` "."
  },
  canLove: False
}

Dancer <- %{
  dance: {
    Echo("I'm " `++` @name `++` " and I'm dancing, I'm really dancing!")
  }
}

Instantiate(Person, "Justin", "Iron Man Helmet") -> justin

justin `MixWith` Dancer

justin.dance()
justin Echo

If(justin.canLove, {
  Echo(justin.name `++` " is capable of love.")
}, {
  Echo(justin.name `++` " can never love.")
})

Cat <- @(name, meow) {
 %{
    name: name,
    meow: {
      Echo("The cat " `++` @name `++` " " `++` meow `++` "ed!")
    }
  }
}

Cat("Neko", "Nyan") -> myKitty
myKitty.meow()

Squirrel <- %{
  __constructor: @(name, numNuts) {
    name -> @name
    numNuts -> @numNuts
  },
  __toNumber: { @numNuts }
}

Instantiate(Squirrel, "Gerald", 6) -> gerald

gerald `+` 6 -> shouldBeTwelve

Echo(shouldBeTwelve)

Try(Gregor, @(error) {
  Echo("Gregor ees sad Gregor does not exist.")
  Echo(error)
})

ThingBuilder <- @(isHappy, numThings) {
  // Initialize an empty object
  %{} -> self
  // Setup its properties
  isHappy -> self.isHappy
  numThings -> self.numThings
  self.__toString <- {
    If (@isHappy, {
      "Is a happy thing with " `++` @numThings `++` " other things."
    }, {
      "Is an unhappy thing with only " `++` @numThings `++` " other things."
    })
  }
  // And finally return the newly created object
  self
}

ThingBuilder(False, 5) -> myThing
Echo(myThing)