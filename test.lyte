/* Import the test classes */
Import("Animal.*")
Import("Barker")

Import("Lyte.Reflect.GetProperties")
Import("Lyte.Test.*")

/* Icky Math */
Factorial <- @(n) {
  If (n `<` 0, {
    Raise("Cannot compute the factorial of " `++` n)
  }, If (n `<=` 1, {
    1
  }, {
    n `*` Factorial(n `-` 1)
  }))
}

FactorialTests <- %{
  ["Value for" `++` " Zero"]: {
    AssertEquals("Factorial(0) should be 1", Factorial(0), 1)
  },
  "Value for One": {
    AssertEquals("Factorial(1) should be 1", Factorial(1), 1)
  },
  "Value for Six": {
    AssertEquals("Factorial(6) should be 720", Factorial(6), 720)
  },
  "Value for -1": {
    AssertRaises("Factorial(-1) should raise an error", "Cannot compute the factorial of -1", Factorial(-1))
  },
  "Will Fail": {
    Fail("This test is guaranteed to fail")
  }
}

Test(FactorialTests).printResults()

/* Puppy Dogs*/
Instantiate(Animal.Dog, "Fido") -> fido
fido `MixWith` Barker
fido.addTrick("roll over")
fido.addTrick("play dead")
fido.doTricks()
fido.bark(10)

/* Kittehs */
Instantiate(Animal.Cat, "Garfield") -> garfield
garfield.attack(fido)
garfield.pet(5)

"A string separated by spaces" -> myString
myString.toUpperCase().split(" ") -> myWords

Until(myWords.empty?, {
  myWords.pop EchoLn
})

Finalize("myWords")
Try({Null -> myWords}, @(error) {
  error.printStackTrace()
})

For(%[0:4:16], @(i) {
  If(i `==` 16, {
    EchoLn(i)
  }, {
    Echo(i `++` " ")
  })
})

TestObj <- %{
  <- name: {
    Try (@actualName, { Pop "Bob" })
  },
  -> name: @(newName) {
    Lyte.Core.If (@name `==` newName, {
      EchoLn("Nothing to change.")
    }, {
      newName -> @actualName
    })
  },
  getNumbers: {
    Math.Random @name.length * Math.Floor Math.Random @name.length * Math.Floor
  },
  __generator: {
    @name -> potato
    For (potato.length, 0, @(i) {
      If (potato[i] `!=` " ", {
        `Yield` potato[i]
      }, {})
    })
  },
  __toString: {
    @getNumbers() -> [i, j]
    @name[i] `++` @name[j]
  }
}

"Bob" -> TestObj.name
Eval("For(TestObj, Echo) EchoLn")
EchoLn({TestObj Type?} `++`  ": "`++` TestObj `++` " " `++` Lyte.JSON.ToJSON(TestObj))
"Length of string \"" "Derp" Dup Dig(3) Swap ++ Swap #["length"] Swap #length Dig(3) " " Swap ++ ++ Dig(3) "\": " ++ Swap ++ EchoLn Pop

/* OpenFile("test.lyte", "r") -> file
file.readLn -> line
Until(line Undefined?, {
  EchoLn(line)
  file.readLn -> line
})
file.close

%[262, 294, 330, 349, 392, 440, 494, 523] -> frequencies
%[5, 5, 6, 7, 7, 6, 5, 4, 3, 3, 4, 5, 5, 4, 4] -> notes
For(notes, @(note) { Lyte.System.Beep(frequencies[note], 500) }) */
