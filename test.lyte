/* Import the test classes */
Import("Animal.*")
Import("Barker")

/* Icky Math */
Factorial <- @(n) {
  If (n `<=` 1, {
    1
  }, {
    n `*` Factorial(n `-` 1)
  })
}

6 Factorial EchoLn

/* Puppy Dogs*/
Instantiate(Animal.Dog, "Fido") -> fido
fido `MixWith` Barker
fido.addTrick("roll over")
fido.addTrick("play dead")
fido.doTricks()
fido.bark(10)

/* Kittehs */
Instantiate(Animal.Cat, "Garfield") -> garfield
garfield.attack(fido)
garfield.pet(5)

/* Exceptions */
Try(Gregor, @(error) {
  EchoLn("Gregor ees sad Gregor does not exist.")
  EchoLn(error)
})

Try(Raise("Some men just want to see the world burn!"), EchoLn)

"A string separated by spaces" -> myString
myString.toUpperCase().split(" ") -> myWords
Finalize("myWords")

Until(myWords.empty?, {
  myWords.pop EchoLn
})

Try({Null -> myWords}, EchoLn)

For(0:4:16, @(i) {
  If(i `==` 16, {
    EchoLn(i)
  }, {
    Echo(i `++` " ")
  })
})

Test <- %{
  name: "Bob",
  changeName: {
    Apply -> newName
    Lyte.Core.If (@name `==` newName, {
      EchoLn("Nothing to change.")
    }, {
      newName -> @name
    })
    Lyte.Reflect.Get("@name")
  }
}

EchoLn(StdOut, Test.changeName("Jeff"))

/* OpenFile("test.lyte", "r") -> file
file.readLn -> line
Until(line Undefined?, {
  EchoLn(line)
  file.readLn -> line
})
file.close */

EchoLn(Eval("2 `+` 2"))
EchoLn(Lyte Type?)

AnotherTest <- %{
  myString: "Hello",
  __toString: {
    @myString[@j @i * 1 +]
  }
}

getNumbers <- {
  2 1
}

getNumbers() -> [AnotherTest.i, AnotherTest.j]
EchoLn(AnotherTest)

/* %[262, 294, 330, 349, 392, 440, 494, 523] -> frequencies
%[5, 5, 6, 7, 7, 6, 5, 4, 3, 3, 4, 5, 5, 4, 4] -> notes
For(notes, @(note) { Lyte.System.Beep(frequencies[note], 500) }) */
