// %import("Lyte.Core.Version")

/* Icky Math */
Factorial <- @(n) {
  If (n `<=` 1, {
    1
  }, {
    n `*` Factorial(n `-` 1)
  })
}

6 Factorial EchoLn

/* Puppy Dogs*/
Dog <- %{
  __constructor: @(name) {
    name -> @name
    %[] -> @tricks
  },
  addTrick: @(trick) {
    @tricks.push(trick)
  },
  doTricks: {
    // Perform Each Trick
    For(@tricks, @(trick) {
      EchoLn(@name `++` " performed the trick \"" `++` trick `++` "!\"")
    })
  }
}

Barker <- %{
  bark: @(n) {
    If (n `<=` 1, {
      EchoLn("BARK!")
    }, {
      Echo("BARK! ")
      @bark(n `-` 1)
    })
  }
}

Instantiate(Dog, "Fido") -> fido
fido `MixWith` Barker
fido.addTrick("roll over")
fido.addTrick("play dead")
fido.doTricks()
fido.bark(10)

/* Exceptions */
Try(Gregor, @(error) {
  EchoLn("Gregor ees sad Gregor does not exist.")
  EchoLn(error)
})

Try(Raise("Some men just want to see the world burn!"), EchoLn)

"A string separated by spaces" -> myString
myString.toUpperCase().split(" ") -> myWords

Until(myWords.empty?, {
  myWords.pop EchoLn
})

For(0:4:16, @(i) {
  If(i `==` 16, {
    EchoLn(i)
  }, {
    Echo(i `++` " ")
  })
})

Test <- %{
  name: "Bob",
  changeName: {
    Apply -> newName
    Lyte.Core.If (@name `==` newName, {
      EchoLn("Nothing to change.")
    }, {
      newName -> @name
    })
  }
}

Test.changeName("Jeff") Test.name StdOut EchoLn

OpenFile("test.lyte", "r") -> file
file.readLn -> line
Until(line Undefined?, {
  EchoLn(line)
  file.readLn -> line
})
file.close